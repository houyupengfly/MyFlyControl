
/*=============================================================================
** 作者：侯玉鹏
** 日期：2017/10/31
** 版本：V1.0
** 函数名: 
** 函数功能：
** 输入参数：
** 输出 ：1  返回值：
          2  改变的全局变量
** 本函数调用的其它函数（版本号）：
** 备注：
** 修改日志： （作者，日期，修改内容及原因）
==============================================================================*/

/*============================ INCLUDES ======================================*/
#include "App_AHRS.h"
#include "FlyControlDataStruct.h"
#include "SeedEstimated.h"
#include "mymath.h"

/*============================ MACROS ========================================*/
float   TIME_CONTANST_ZER=3.0f;
#define K_ACC_ZER 	        (1.0f / (TIME_CONTANST_ZER * TIME_CONTANST_ZER * TIME_CONTANST_ZER))
#define K_VEL_ZER	        (3.0f / (TIME_CONTANST_ZER * TIME_CONTANST_ZER))//20															
#define K_POS_ZER           (3.0f / TIME_CONTANST_ZER)
#define Num  50
#define Yaw      0
#define Pitch    1
#define Roll     2

#define X_Axis  0
#define Y_Axis  1


#define TIME_CONTANST_XY      2.5f
#define K_ACC_XY	         (1.0f / (TIME_CONTANST_XY * TIME_CONTANST_XY * TIME_CONTANST_XY))
#define K_VEL_XY             (3.0f / (TIME_CONTANST_XY * TIME_CONTANST_XY))															// XY????・′à??μêy,3.0
#define K_POS_XY             (3.0f / TIME_CONTANST_XY)

#define CNTLCYCLE  0.005f


/*============================ TYPES =========================================*/
SINS NewSinsData;
SINS OrigionSinsData;


typedef struct
{
 float Pit;
 float Rol;
}Vector2_Ang;


typedef struct
{
 float Pit;
 float Rol;
}Vector2_Body;
/*============================ GLOBAL VARIABLES ==============================*/
extern float   DCMgb[3][3];
extern FlyControlDataStruct g_FlyControlDataStruct;


float Altitude_Dealt=0;
float Altitude_Estimate=0;


float X_Delta=0,Y_Delta=0;
u16 Save_Period_Cnt=0;
u16 SINS_Delay_Cnt=20;//10ms
Vector2_Body Pos_Err_On_Accel={0};
Vector2_Body  Accel_Correction_BF={0};

/*============================ STATIC VARIABLES ==============================*/

float Acceleration_Length=0;

float pos_correction[3]={0,0,0};
float acc_correction[3]={0,0,0};
float vel_correction[3]={0,0,0};

float SpeedDealt[3]={0}; //速度修正后

float Position_History[2][100]={0};
float Vel_History[2][100]={0};
float Acce_bias[2]={0};
/*============================ FUNCTION ======================================*/

/*确定以地理坐标系作为导航坐标系*/
void SpeedEstimated(void)
{	
	 
	 OrigionSinsData.acc_b[0] = g_FlyControlDataStruct.AppImuDataStruct.AccXFilterout;
	 OrigionSinsData.acc_b[1] = g_FlyControlDataStruct.AppImuDataStruct.AccYFilterout;
	 OrigionSinsData.acc_b[2] = g_FlyControlDataStruct.AppImuDataStruct.AccZFilterout;
	
	//! 转换到地理坐标系
	 for(u8 i=0; i<3; i++)
	 {
			 for(u8 j=0; j<3; j++)
		  {
			  OrigionSinsData.acc_n[i] += DCMgb[j][i]* OrigionSinsData.acc_b[j];
		  }
	 }

	 OrigionSinsData.accNED[0] = OrigionSinsData.acc_n[0]; //地理坐标系下X轴速度
	 OrigionSinsData.accNED[1] = OrigionSinsData.acc_n[1]; //地理坐标系下Y轴速度
	 OrigionSinsData.accNED[2] = OrigionSinsData.acc_n[2]; //地理坐标系下Z轴速度
	
	 OrigionSinsData.acc_n[0] =0;
	 OrigionSinsData.acc_n[1] =0;
	 OrigionSinsData.acc_n[2] =0;
	 
	 /*X轴  机头*/
     OrigionSinsData.accNED[0]*=100;//加速度cm/s^2
     /*Y轴  右侧*/  
     OrigionSinsData.accNED[1]*=100;//加速度cm/s^2

     /*Z轴  向下*/
   
     OrigionSinsData.accNED[2] =OrigionSinsData.accNED[2]-9.80;//减去重力加速度
     OrigionSinsData.accNED[2]*=100;//加速度cm/s^2

//     /*导航坐标系下加速度的模*/
//     Acceleration_Length=my_sqrt(g_FlyControlDataStruct.AppSINS.accNED[2]*g_FlyControlDataStruct.AppSINS.accNED[2] + g_FlyControlDataStruct.AppSINS.accNED[1]*g_FlyControlDataStruct.AppSINS.accNED[1] + g_FlyControlDataStruct.AppSINS.accNED[0]*g_FlyControlDataStruct.AppSINS.accNED[0]);
                                 
 }
void Strapdown_INS_Reset(SINS *Ins,u8 Axis,float Pos_Target,float Vel_Target)
{
      u16 Cnt=0;
      Ins->Position[Axis]=Pos_Target;//位置重置
      Ins->Speed[Axis]=Vel_Target;//速度重置
      Ins->Acceleration[Axis]=0.0f;//加速度清零
      Ins->Acce_Bias[Axis]=0.0f;
      for(Cnt=Num-1;Cnt>0;Cnt--)//历史位置值，全部装载为当前观测值
      {
         Ins->Pos_History[Axis][Cnt]=Pos_Target;
      }
         Ins->Pos_History[Axis][0]=Pos_Target;
      for(Cnt=Num-1;Cnt>0;Cnt--)//历史速度值，全部装载为当前观测值
      {
         Ins->Vel_History[Axis][Cnt]=Vel_Target;
      }
         Ins->Vel_History[Axis][0]=Vel_Target;
      pos_correction[Axis]=0;//清空惯导融合量
      acc_correction[Axis]=0;
      vel_correction[Axis]=0;
}
 
/*SINS Z轴加速度 位置 速度 修正*/
void SINS_Z(float T)
{     
	  float dt=T;
	  static u16 Save_Cnt=0;
      Save_Cnt++;//数据存储周期
	  u16 Cnt=0;
      //由观测量（气压计）得到状态误差
      Altitude_Dealt=(g_FlyControlDataStruct.AppHightCtrl.BaroHight) - NewSinsData.Pos_History[Yaw][2];//气压计(超声波)与SINS估计量的差，单位cm
      //三路积分反馈量修正惯导
      acc_correction[Yaw] +=Altitude_Dealt* K_ACC_ZER*dt ;//加速度矫正量(s)
      vel_correction[Yaw] +=Altitude_Dealt* K_VEL_ZER*dt ;//速度矫正量
      pos_correction[Yaw] +=Altitude_Dealt* K_POS_ZER*dt ;//位置矫正量
	
      //加速度计矫正后更新  矫正量就是估计量加上根据误差而来的修正量
      NewSinsData.Last_Acceleration[Yaw]= NewSinsData.Acceleration[Yaw];//上一次加速度量
      NewSinsData.Acceleration[Yaw]     = OrigionSinsData.accNED[2] + acc_correction[Yaw];
	
      //速度增量矫正后更新，用于更新位置,由于步长h=0.005,相对较长，
      //这里采用二阶龙格库塔法更新微分方程，不建议用更高阶段，因为加速度信号非平滑
	  //两次加速度平均值乘以时间求速度
      SpeedDealt[Yaw]=+(NewSinsData.Last_Acceleration[Yaw] + NewSinsData.Acceleration[Yaw])*dt/2.0;
	
      //原始位置更新 新速度加速度修正
      OrigionSinsData.Position[Yaw]+=(NewSinsData.Speed[Yaw]+0.5* SpeedDealt[Yaw])*dt;//vot +1/2att
      //位置矫正后更新  原始位置加修正
      NewSinsData.Position[Yaw] = OrigionSinsData.Position[Yaw] + pos_correction[Yaw];
      //原始速度更新
      OrigionSinsData.Speed[Yaw] += SpeedDealt[Yaw];
      //速度矫正后更新
      NewSinsData.Speed[Yaw] = OrigionSinsData.Speed[Yaw] + vel_correction[Yaw];

      if(Save_Cnt>=1)//20ms
      {
        for(Cnt=Num-1;Cnt>0;Cnt--)//20ms滑动一次
        {
			NewSinsData.Pos_History[Yaw][Cnt]=NewSinsData.Pos_History[Yaw][Cnt-1];
        }
			NewSinsData.Pos_History[Yaw][0]=NewSinsData.Position[Yaw];
			Save_Cnt=0;
      }
}

//还没加入倾角对光流的影响
void SINS_XY()
{
      u16 Cnt=0;
      Save_Period_Cnt++;
      if(Save_Period_Cnt>=1)//5ms
      {
            for(Cnt=Num-1;Cnt>0;Cnt--)//10ms滑动一次
            {
              NewSinsData.Pos_History[Pitch][Cnt]=NewSinsData.Pos_History[Pitch][Cnt-1];
              NewSinsData.Pos_History[Roll][Cnt]=NewSinsData.Pos_History[Roll][Cnt-1];
            }
              NewSinsData.Pos_History[Pitch][0]=NewSinsData.Position[Pitch];
              NewSinsData.Pos_History[Roll][0]=NewSinsData.Position[Roll];
              Save_Period_Cnt=0;
      }
      //光流机体坐标系下，机头、机右方向位置偏移与SINS估计量的差，单位cm
      X_Delta=g_FlyControlDataStruct.AppOptflowStruct.x_offest-NewSinsData.Pos_History[Pitch][SINS_Delay_Cnt];
      Y_Delta=g_FlyControlDataStruct.AppOptflowStruct.y_offest-NewSinsData.Pos_History[Roll][SINS_Delay_Cnt];
	    
      Pos_Err_On_Accel.Rol = Y_Delta;//载体系Roll方向    X轴
      Pos_Err_On_Accel.Pit =-X_Delta;//载体系Pitch方向  Y轴
	  
      Accel_Correction_BF.Pit+=Pos_Err_On_Accel.Pit* K_ACC_XY*CNTLCYCLE;//在载体机头方向，加速度矫正量
      Accel_Correction_BF.Rol+=Pos_Err_On_Accel.Rol* K_ACC_XY*CNTLCYCLE;//在载体横滚方向，加速度矫正量

      acc_correction[Pitch] += X_Delta* K_ACC_XY*CNTLCYCLE;//加速度矫正量
      vel_correction[Pitch] += X_Delta* K_VEL_XY*CNTLCYCLE;//速度矫正量
      pos_correction[Pitch] += X_Delta* K_POS_XY*CNTLCYCLE;//位置矫正量
	  
      acc_correction[Roll]  += Y_Delta* K_ACC_XY*CNTLCYCLE;//加速度矫正量
      vel_correction[Roll]  += Y_Delta* K_VEL_XY*CNTLCYCLE;//速度矫正量
      pos_correction[Roll]  += Y_Delta* K_POS_XY*CNTLCYCLE;//位置矫正量

	  
      /*************************************************************/
      //水平运动加速度计校正
      NewSinsData.Acceleration[Pitch]=OrigionSinsData.accNED[0] +acc_correction[Pitch];
      //速度增量矫正后更新，用于更新位置
      SpeedDealt[Pitch]=NewSinsData.Acceleration[Pitch]*CNTLCYCLE;
      //原始位置更新
      OrigionSinsData.Position[Pitch]+=(NewSinsData.Speed[Pitch]+0.5*SpeedDealt[Pitch])*CNTLCYCLE;
      //位置矫正后更新
      NewSinsData.Position[Pitch]=OrigionSinsData.Position[Pitch]+pos_correction[Pitch];
      //原始速度更新
      OrigionSinsData.Speed[Pitch]+=SpeedDealt[Pitch];
      //速度矫正后更新
      NewSinsData.Speed[Pitch]=OrigionSinsData.Speed[Pitch]+vel_correction[Pitch];

      /*************************************************************/
      //水平运动加速度计校正
      NewSinsData.Acceleration[Roll]=OrigionSinsData.accNED[1]+acc_correction[Roll];
      //速度增量矫正后更新，用于更新位置
      SpeedDealt[Roll]=NewSinsData.Acceleration[Roll]*CNTLCYCLE;
      //原始位置更新
      OrigionSinsData.Position[Roll]+=(NewSinsData.Speed[Roll]+0.5*SpeedDealt[Roll])*CNTLCYCLE;
      //位置矫正后更新
      NewSinsData.Position[Roll]=OrigionSinsData.Position[Roll]+pos_correction[Roll];
      //原始速度更新
      OrigionSinsData.Speed[Roll]+=SpeedDealt[Roll];
      //速度矫正后更新
      NewSinsData.Speed[Roll]=OrigionSinsData.Speed[Roll]+vel_correction[Roll];
}



