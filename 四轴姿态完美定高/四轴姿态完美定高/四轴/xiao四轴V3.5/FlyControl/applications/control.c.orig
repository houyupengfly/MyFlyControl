/**
* @file     Drv_control.c
* @brief    control
* @version  v1.0
* @author   HYP
* @date     2017-2-9
* @note
*/
/*============================ INCLUDES ======================================*/
#include "FlyControlDataStruct.h"
#include "control.h"
#include "Algorithm_math.h"
#include "mymath.h"
#include "stm32f10x.h"
#include "string.h"
#include "SeedEstimated.h"
/*============================ MACROS ========================================*/

#define ThrottleMin      1000
#define ThrottleMax      2000

#define BARO_SPEED        200     // cm/s
/*============================ TYPES =========================================*/


/*============================ GLOBAL VARIABLES ==============================*/
extern  FlyControlDataStruct g_FlyControlDataStruct;
extern  SINS NewSinsData;
/*============================ LOCAL VARIABLES ===============================*/
float exp_height_speed;
float exp_height;

u16 k_inff=400;;
u16 langflag=0;

float err_i_comp;
float ct_val_thr;

u8 ct_alt_hold;
u8 ct_pos_hold;

s16 balance[6],balance_max;
/*============================ IMPLEMENTATION ================================*/
float Control_Device_LPF(float curr_inputer,Butter_BufferData *Buffer,Butter_Parameter *Parameter)
{
    /* 加速度计Butterworth滤波 */
    /* 获取最新x(n) */
    Buffer->Input_Butter[2]=curr_inputer;
    /* Butterworth滤波 */
    Buffer->Output_Butter[2]=
        Parameter->b[0] * Buffer->Input_Butter[2]
        +Parameter->b[1] * Buffer->Input_Butter[1]
        +Parameter->b[2] * Buffer->Input_Butter[0]
        -Parameter->a[1] * Buffer->Output_Butter[1]
        -Parameter->a[2] * Buffer->Output_Butter[0];
    /* x(n) 序列保存 */
    Buffer->Input_Butter[0]=Buffer->Input_Butter[1];
    Buffer->Input_Butter[1]=Buffer->Input_Butter[2];
    /* y(n) 序列保存 */
    Buffer->Output_Butter[0]=Buffer->Output_Butter[1];
    Buffer->Output_Butter[1]=Buffer->Output_Butter[2];
    return (Buffer->Output_Butter[2]);
}



Butter_Parameter Control_Device_Div_LPF_Parameter= {
//200---20hz
    1,    -1.14298050254,   0.4128015980962,
    0.06745527388907,   0.1349105477781,  0.06745527388907
};

Butter_Parameter Control_Device_Err_LPF_Parameter= {
    //200hz---2hz
    1,   -1.911197067426,   0.9149758348014,
    0.0009446918438402,  0.00188938368768,0.0009446918438402
};


/********************************************************姿态控制角速度环**************************************************************/
void GyroPIDControl(FlyControlDataStruct *Fly)
{ 	
  	/*PITCH*/

	Fly->AppCtrlStruct.Pitch.GyroPid.err =  500*(Fly->AppCtrlStruct.Pitch.AnglePid.pidout/30) - Fly->AppImuDataStruct.GyroYFilterout;
		
	Fly->AppCtrlStruct.Pitch.GyroPid.Increment += Fly->AppCtrlStruct.Pitch.GyroPid.err; 
	
    for(u8 i=4;i>0;i--)//数字低通后微分项保存
    {
		Fly->AppCtrlStruct.Pitch.GyroPid.Dis_Error_History[i]= Fly->AppCtrlStruct.Pitch.GyroPid.Dis_Error_History[i-1];
    }
	  
	Fly->AppCtrlStruct.Pitch.GyroPid.Dis_Error_History[0]=Control_Device_LPF((Fly->AppCtrlStruct.Pitch.GyroPid.err - Fly->AppCtrlStruct.Pitch.GyroPid.errold),
                                  &Fly->AppCtrlStruct.Pitch.GyroPid.Control_Device_LPF_Buffer,
                                  &Control_Device_Div_LPF_Parameter);//巴特沃斯低通后得到的微分项,20hz

	Fly->AppCtrlStruct.Pitch.GyroPid.Increment = LIMIT(Fly->AppCtrlStruct.Pitch.GyroPid.Increment,-250,250); 

	Fly->AppCtrlStruct.Pitch.GyroPid.pidout= Fly->AppCtrlStruct.Pitch.GyroPid.p * Fly->AppCtrlStruct.Pitch.GyroPid.err + Fly->AppCtrlStruct.Pitch.GyroPid.i * Fly->AppCtrlStruct.Pitch.GyroPid.Increment + Fly->AppCtrlStruct.Pitch.GyroPid.d* Fly->AppCtrlStruct.Pitch.GyroPid.Dis_Error_History[0];

    Fly->AppCtrlStruct.Pitch.GyroPid.pidout = LIMIT(Fly->AppCtrlStruct.Pitch.GyroPid.pidout,-500,500);
	Fly->AppCtrlStruct.Pitch.GyroPid.pidout =0;///////////////////
	Fly->AppCtrlStruct.Pitch.GyroPid.errold =  Fly->AppCtrlStruct.Pitch.GyroPid.err;
   /*ROLL*/
//	Fly->AppCtrlStruct.Roll.GyroPid.err =  500*(Fly->AppCtrlStruct.Roll.AnglePid.pidout/30)- Fly->AppImuDataStruct.GyroXFilterout;
	Fly->AppCtrlStruct.Roll.GyroPid.err =  (Fly->AppRcDataStruct.Roll-1500)*0.002f*300  - Fly->AppImuDataStruct.GyroXFilterout;	
	Fly->AppCtrlStruct.Roll.GyroPid.Increment += Fly->AppCtrlStruct.Roll.GyroPid.err; 
	
    for(u8 i=4;i>0;i--)//数字低通后微分项保存
    {
		Fly->AppCtrlStruct.Roll.GyroPid.Dis_Error_History[i]= Fly->AppCtrlStruct.Roll.GyroPid.Dis_Error_History[i-1];
    }
	  
	Fly->AppCtrlStruct.Roll.GyroPid.Dis_Error_History[0]=Control_Device_LPF((Fly->AppCtrlStruct.Roll.GyroPid.err - Fly->AppCtrlStruct.Roll.GyroPid.errold),
                                  &Fly->AppCtrlStruct.Roll.GyroPid.Control_Device_LPF_Buffer,
                                  &Control_Device_Div_LPF_Parameter);//巴特沃斯低通后得到的微分项,20hz

	Fly->AppCtrlStruct.Roll.GyroPid.Increment = LIMIT(Fly->AppCtrlStruct.Roll.GyroPid.Increment,-250,250); 

	Fly->AppCtrlStruct.Roll.GyroPid.pidout= Fly->AppCtrlStruct.Roll.GyroPid.p * Fly->AppCtrlStruct.Roll.GyroPid.err + Fly->AppCtrlStruct.Roll.GyroPid.i * Fly->AppCtrlStruct.Roll.GyroPid.Increment + Fly->AppCtrlStruct.Roll.GyroPid.d* Fly->AppCtrlStruct.Roll.GyroPid.Dis_Error_History[0];

    Fly->AppCtrlStruct.Roll.GyroPid.pidout = LIMIT(Fly->AppCtrlStruct.Roll.GyroPid.pidout,-500,500);
	
	Fly->AppCtrlStruct.Roll.GyroPid.errold =  Fly->AppCtrlStruct.Roll.GyroPid.err;
	
	/*YAW*/
	
	Fly->AppCtrlStruct.Yaw.GyroPid.err =  500*(Fly->AppCtrlStruct.Yaw.AnglePid.pidout/45) - Fly->AppImuDataStruct.GyroZFilterout;
		
	Fly->AppCtrlStruct.Yaw.GyroPid.Increment += Fly->AppCtrlStruct.Yaw.GyroPid.err; 
	
	for(u8 i=4;i>0;i--)//数字低通后微分项保存
    {
		Fly->AppCtrlStruct.Yaw.GyroPid.Dis_Error_History[i]= Fly->AppCtrlStruct.Yaw.GyroPid.Dis_Error_History[i-1];
    }
	  
	Fly->AppCtrlStruct.Yaw.GyroPid.Dis_Error_History[0]=Control_Device_LPF((Fly->AppCtrlStruct.Yaw.GyroPid.err - Fly->AppCtrlStruct.Yaw.GyroPid.errold),
                                  &Fly->AppCtrlStruct.Yaw.GyroPid.Control_Device_LPF_Buffer,
                                  &Control_Device_Div_LPF_Parameter);//巴特沃斯低通后得到的微分项,20hz

	Fly->AppCtrlStruct.Yaw.GyroPid.Increment = LIMIT(Fly->AppCtrlStruct.Yaw.GyroPid.Increment,-200,200); 

	Fly->AppCtrlStruct.Yaw.GyroPid.pidout= Fly->AppCtrlStruct.Yaw.GyroPid.p * Fly->AppCtrlStruct.Yaw.GyroPid.err + Fly->AppCtrlStruct.Yaw.GyroPid.i * Fly->AppCtrlStruct.Yaw.GyroPid.Increment + Fly->AppCtrlStruct.Yaw.GyroPid.d* Fly->AppCtrlStruct.Yaw.GyroPid.Dis_Error_History[0];
	
    Fly->AppCtrlStruct.Yaw.GyroPid.pidout = LIMIT(Fly->AppCtrlStruct.Yaw.GyroPid.pidout,-400,400);
	Fly->AppCtrlStruct.Yaw.GyroPid.pidout=0;/////////////////
	Fly->AppCtrlStruct.Yaw.GyroPid.errold =  Fly->AppCtrlStruct.Yaw.GyroPid.err;
	
	
}

/***




*****************************************************姿态控制角度环**************************************************************/
void AngalControl(FlyControlDataStruct *Fly)
{
    /*PITCH*/
    Fly->AppCtrlStruct.Pitch.AnglePid.err =  LIMIT(Fly->AppRCTargetDataStruct.Pitch- Fly->App_AngleStruct.Pitch,-30,30);
    Fly->AppCtrlStruct.Pitch.AnglePid.Increment += Fly->AppCtrlStruct.Pitch.AnglePid.err;
    Fly->AppCtrlStruct.Pitch.AnglePid.Increment = LIMIT(Fly->AppCtrlStruct.Pitch.AnglePid.Increment,-5,5);
    Fly->AppCtrlStruct.Pitch.AnglePid.pidout= Fly->AppCtrlStruct.Pitch.AnglePid.p * Fly->AppCtrlStruct.Pitch.AnglePid.err + Fly->AppCtrlStruct.Pitch.AnglePid.i * Fly->AppCtrlStruct.Pitch.AnglePid.Increment + Fly->AppCtrlStruct.Pitch.AnglePid.d *(Fly->AppCtrlStruct.Pitch.AnglePid.err - Fly->AppCtrlStruct.Pitch.AnglePid.errold);
    Fly->AppCtrlStruct.Pitch.AnglePid.pidout = LIMIT(Fly->AppCtrlStruct.Pitch.AnglePid.pidout,-30,30);
    Fly->AppCtrlStruct.Pitch.AnglePid.errold =  Fly->AppCtrlStruct.Pitch.AnglePid.err;
    /*ROLL*/
    Fly->AppCtrlStruct.Roll.AnglePid.err =  LIMIT(Fly->AppRCTargetDataStruct.Roll- Fly->App_AngleStruct.Roll,-30,30);
    Fly->AppCtrlStruct.Roll.AnglePid.Increment += Fly->AppCtrlStruct.Roll.AnglePid.err;
    Fly->AppCtrlStruct.Roll.AnglePid.Increment = LIMIT(Fly->AppCtrlStruct.Roll.AnglePid.Increment,-5,5);
    Fly->AppCtrlStruct.Roll.AnglePid.pidout= Fly->AppCtrlStruct.Roll.AnglePid.p * Fly->AppCtrlStruct.Roll.AnglePid.err + Fly->AppCtrlStruct.Roll.AnglePid.i * Fly->AppCtrlStruct.Roll.AnglePid.Increment + Fly->AppCtrlStruct.Roll.AnglePid.d *(Fly->AppCtrlStruct.Roll.AnglePid.err - Fly->AppCtrlStruct.Roll.AnglePid.errold);
    Fly->AppCtrlStruct.Roll.AnglePid.pidout = LIMIT(Fly->AppCtrlStruct.Roll.AnglePid.pidout,-30,30);
    Fly->AppCtrlStruct.Roll.AnglePid.errold =  Fly->AppCtrlStruct.Roll.AnglePid.err;

    /*YAW*/

    if((Fly->AppRCTargetDataStruct.Yaw- Fly->App_AngleStruct.Yaw)>180 || (Fly->AppRCTargetDataStruct.Yaw- Fly->App_AngleStruct.Yaw)<-180)
    {
        if(Fly->AppRCTargetDataStruct.Yaw>0 && Fly->App_AngleStruct.Yaw<0)  Fly->AppCtrlStruct.Yaw.AnglePid.err= (-180 - Fly->App_AngleStruct.Yaw) +(Fly->AppRCTargetDataStruct.Yaw - 180);

        if(Fly->AppRCTargetDataStruct.Yaw<0 && Fly->App_AngleStruct.Yaw>0)  Fly->AppCtrlStruct.Yaw.AnglePid.err= (180  - Fly->App_AngleStruct.Yaw)  +(Fly->AppRCTargetDataStruct.Yaw + 180);
    }
    else
    {
        Fly->AppCtrlStruct.Yaw.AnglePid.err = Fly->AppRCTargetDataStruct.Yaw - Fly->App_AngleStruct.Yaw;
    }

    Fly->AppCtrlStruct.Yaw.AnglePid.err =  LIMIT(Fly->AppRCTargetDataStruct.Yaw- Fly->App_AngleStruct.Yaw,-45,45);
    Fly->AppCtrlStruct.Yaw.AnglePid.Increment += Fly->AppCtrlStruct.Yaw.AnglePid.err;
    Fly->AppCtrlStruct.Yaw.AnglePid.Increment = LIMIT(Fly->AppCtrlStruct.Yaw.AnglePid.Increment,-5,5);
    Fly->AppCtrlStruct.Yaw.AnglePid.pidout= Fly->AppCtrlStruct.Yaw.AnglePid.p * Fly->AppCtrlStruct.Yaw.AnglePid.err + Fly->AppCtrlStruct.Yaw.AnglePid.i * Fly->AppCtrlStruct.Yaw.AnglePid.Increment + Fly->AppCtrlStruct.Yaw.AnglePid.d *(Fly->AppCtrlStruct.Yaw.AnglePid.err - Fly->AppCtrlStruct.Yaw.AnglePid.errold);
    Fly->AppCtrlStruct.Yaw.AnglePid.pidout = LIMIT(Fly->AppCtrlStruct.Yaw.AnglePid.pidout,-45,45);
    Fly->AppCtrlStruct.Yaw.AnglePid.errold =  Fly->AppCtrlStruct.Yaw.AnglePid.err;
}

/********************************************************定高控制**************************************************************/
void AltitudeV(void)
{
    u8 out_en;

    if(g_FlyControlDataStruct.AppConfigDataStruct.Startflg)
    {
        out_en = 1;
    }
    else
    {
        out_en = 0;
    }

    exp_height_speed+= g_FlyControlDataStruct.AppHightCtrl.HightCtrl.pidout;
    g_FlyControlDataStruct.AppHightCtrl.SpeedCtrl.err =  exp_height_speed  - NewSinsData.Speed[0];

    for(u8 i=4; i>0; i--) //数字低通后微分项保存
    {
        g_FlyControlDataStruct.AppHightCtrl.SpeedCtrl.Dis_Error_History[i]= g_FlyControlDataStruct.AppHightCtrl.SpeedCtrl.Dis_Error_History[i-1];
    }

    g_FlyControlDataStruct.AppHightCtrl.SpeedCtrl.Dis_Error_History[0]=Control_Device_LPF((g_FlyControlDataStruct.AppHightCtrl.SpeedCtrl.err - g_FlyControlDataStruct.AppHightCtrl.SpeedCtrl.errold),
            &g_FlyControlDataStruct.AppHightCtrl.SpeedCtrl.Control_Device_LPF_Buffer,
            &Control_Device_Div_LPF_Parameter);//巴特沃斯低通后得到的微分项,20hz
    
    g_FlyControlDataStruct.AppHightCtrl.SpeedCtrl.kpout  = g_FlyControlDataStruct.AppHightCtrl.SpeedCtrl.p*g_FlyControlDataStruct.AppHightCtrl.SpeedCtrl.err;
    g_FlyControlDataStruct.AppHightCtrl.SpeedCtrl.kiout += g_FlyControlDataStruct.AppHightCtrl.SpeedCtrl.i * g_FlyControlDataStruct.AppHightCtrl.SpeedCtrl.err;
    g_FlyControlDataStruct.AppHightCtrl.SpeedCtrl.kiout =  LIMIT(g_FlyControlDataStruct.AppHightCtrl.SpeedCtrl.kiout,-100,100);
    g_FlyControlDataStruct.AppHightCtrl.SpeedCtrl.pidout=  g_FlyControlDataStruct.AppHightCtrl.SpeedCtrl.kpout + g_FlyControlDataStruct.AppHightCtrl.SpeedCtrl.kiout * g_FlyControlDataStruct.AppHightCtrl.SpeedCtrl.d* g_FlyControlDataStruct.AppHightCtrl.SpeedCtrl.Dis_Error_History[0];
    g_FlyControlDataStruct.AppHightCtrl.SpeedCtrl.pidout = LIMIT(g_FlyControlDataStruct.AppHightCtrl.SpeedCtrl.pidout,-1000+err_i_comp,1000-err_i_comp);
    g_FlyControlDataStruct.AppHightCtrl.SpeedCtrl.errold =  g_FlyControlDataStruct.AppHightCtrl.SpeedCtrl.err;

    if(out_en)
    {
        err_i_comp = k_inff;
    }
    else
    {
        err_i_comp = 0;
    }

    g_FlyControlDataStruct.AppCtrlStruct.ThrControl = out_en *(g_FlyControlDataStruct.AppHightCtrl.SpeedCtrl.pidout + err_i_comp - 0.05f *NewSinsData.Acceleration[0]);
}

void AltitudeH(void)
{
    u8 out_en;

    if(g_FlyControlDataStruct.AppConfigDataStruct.Startflg)
    {
        out_en = 1;
    }
    else
    {
        out_en = 0;
    }

    //遥控高度变化阶段
    if(exp_height_speed != 0)
    {
        ct_alt_hold = 0;//关闭定高
        g_FlyControlDataStruct.AppHightCtrl.HightCtrl.pidout = 0;//输出为零
    }

    //重新回到定高阶段
    if(ct_alt_hold==0)
    {
        //如果反馈速度接近0，启动定高
        if(ABS(NewSinsData.Speed[0])<10)
        {
            ct_alt_hold = 1;
            exp_height =NewSinsData.Position[0]; //记录当前期望高度
        }
        //否则减速
        else
        {
            g_FlyControlDataStruct.AppHightCtrl.HightCtrl.pidout += (-NewSinsData.Speed[0]*1.5 - g_FlyControlDataStruct.AppHightCtrl.HightCtrl.pidout)*0.5f;//减速
        }
    }

    if(out_en)
    {
        if(ct_alt_hold == 1)
        {
            g_FlyControlDataStruct.AppConfigDataStruct.Throw=0;
            g_FlyControlDataStruct.AppHightCtrl.HightCtrl.err = (exp_height - NewSinsData.Position[0]);
            //高度误差单次进行限制
            g_FlyControlDataStruct.AppHightCtrl.HightCtrl.err = LIMIT(g_FlyControlDataStruct.AppHightCtrl.HightCtrl.err,- 25,25);
            //高度环误差计算 P*ERR
            g_FlyControlDataStruct.AppHightCtrl.HightCtrl.kpout = g_FlyControlDataStruct.AppHightCtrl.HightCtrl.p*g_FlyControlDataStruct.AppHightCtrl.HightCtrl.err;
            //高度环积分运算
            g_FlyControlDataStruct.AppHightCtrl.HightCtrl.kiout += g_FlyControlDataStruct.AppHightCtrl.HightCtrl.i * g_FlyControlDataStruct.AppHightCtrl.HightCtrl.err;
            //积分限制
            g_FlyControlDataStruct.AppHightCtrl.HightCtrl.kiout = LIMIT(g_FlyControlDataStruct.AppHightCtrl.HightCtrl.kiout,- 100,100);
            //微分运算
            g_FlyControlDataStruct.AppHightCtrl.HightCtrl.kdout = g_FlyControlDataStruct.AppHightCtrl.HightCtrl.d* (g_FlyControlDataStruct.AppHightCtrl.HightCtrl.err - g_FlyControlDataStruct.AppHightCtrl.HightCtrl.errold);
            //误差记录
            g_FlyControlDataStruct.AppHightCtrl.HightCtrl.errold = g_FlyControlDataStruct.AppHightCtrl.HightCtrl.err;
            //计算高度环输出
            g_FlyControlDataStruct.AppHightCtrl.HightCtrl.pidout = g_FlyControlDataStruct.AppHightCtrl.HightCtrl.kpout + g_FlyControlDataStruct.AppHightCtrl.HightCtrl.kiout +	g_FlyControlDataStruct.AppHightCtrl.HightCtrl.errold ;
            //高度环输出限制
            g_FlyControlDataStruct.AppHightCtrl.HightCtrl.pidout = LIMIT(g_FlyControlDataStruct.AppHightCtrl.HightCtrl.pidout ,-300,300);
            exp_height_speed = g_FlyControlDataStruct.AppHightCtrl.HightCtrl.pidout;
        }
    }
    else
    {
        exp_height =NewSinsData.Position[0]; //记录当前期望高度
        g_FlyControlDataStruct.AppHightCtrl.HightCtrl.pidout = 0;
    }

}

void AltitudeCtrl(void)
{
    static u8 _cnt;

    //标记为未起飞状态
    if(g_FlyControlDataStruct.AppConfigDataStruct.AirStatus == 0 || g_FlyControlDataStruct.AppConfigDataStruct.FlyMode!=1)
    {
        g_FlyControlDataStruct.AppConfigDataStruct.Startflg = 0;
        return;
    }

    if(g_FlyControlDataStruct.AppConfigDataStruct.Startflg  && g_FlyControlDataStruct.AppConfigDataStruct.AirStatus && (g_FlyControlDataStruct.AppHightCtrl.SpeedCtrl.pidout<250))   //降落判断
    {
        _cnt++;

        if(_cnt>=200)
        {
            _cnt = 0;            //清除标记
            g_FlyControlDataStruct.AppConfigDataStruct.Startflg = 0;           //标记为未起飞状态
            g_FlyControlDataStruct.AppConfigDataStruct.LandDown = 0;
            g_FlyControlDataStruct.AppConfigDataStruct.AirStatus= 0;			 //上锁
        }
    }
    else _cnt = 0;

    switch(g_FlyControlDataStruct.AppConfigDataStruct.Startflg)
    {
    //没有起飞
    case 0:
        if(g_FlyControlDataStruct.AppRcDataStruct.THR>=0)
        {
            g_FlyControlDataStruct.AppHightCtrl.baroStart = 1;//高度清零
            g_FlyControlDataStruct.AppConfigDataStruct.Startflg = 1;//起飞
        }
        else
        {
            exp_height_speed = 0 ;
        }

        break;

    //自动起飞阶段
    case 1:

        //起飞高度大于目标高度
        if(NewSinsData.Position[0] >= g_FlyControlDataStruct.AppHightCtrl.StartHight ||g_FlyControlDataStruct.AppConfigDataStruct.Throw)
        {
            g_FlyControlDataStruct.AppConfigDataStruct.Startflg = 2;
        }
        else
        {
            exp_height_speed = 250 + BARO_SPEED *my_deathzoom_2(g_FlyControlDataStruct.AppRcDataStruct.THR - 1500,100)/400.0f;;//自动起飞速度
        }

        exp_height_speed= LIMIT(exp_height_speed,0,300);

        //自动起飞过程中拉低油门，可以取消自动起飞
        if(g_FlyControlDataStruct.AppRcDataStruct.THR< 1100) g_FlyControlDataStruct.AppConfigDataStruct.Startflg = 2;

        break;

    //飞行中
    default:

        //自动降落
        if(g_FlyControlDataStruct.AppConfigDataStruct.LandDown)
        {
            exp_height_speed = -100 + BARO_SPEED *my_deathzoom_2(g_FlyControlDataStruct.AppRcDataStruct.THR - 1500,100)/400.0f;;
            exp_height_speed = LIMIT(exp_height_speed,-200,200);
        }
        //遥控控制高度
        else
        {
            exp_height_speed = BARO_SPEED *my_deathzoom_2(g_FlyControlDataStruct.AppRcDataStruct.THR - 1500,100)/400.0f;
        }

        break;
    }

    AltitudeV();
    AltitudeH();
}


/******************************************************************光流定点控制*******************************************************************************/
void PositionXY(void)
{
    u8 out_en;

    if(g_FlyControlDataStruct.AppConfigDataStruct.Flowflag)
    {
        out_en = 1;
    }
    else
    {
        out_en = 0;
    }

    if((my_abs(g_FlyControlDataStruct.AppRCTargetDataStruct.Pitch<1)) && my_abs(g_FlyControlDataStruct.AppRCTargetDataStruct.Roll<1))//无水平遥控量给定右手摇杆期望小于1度
    {
        g_FlyControlDataStruct.AppPostionCtrl.HomeX=0;
        g_FlyControlDataStruct.AppPostionCtrl.HomeY=0;
        
        //位置反馈，来源于当前惯导的位置估计
        
        g_FlyControlDataStruct.AppPostionCtrl.PostionCtrlX.err = (g_FlyControlDataStruct.AppPostionCtrl.HomeX - g_FlyControlDataStruct.AppOptflowStruct.x_offest); //PITCH
        g_FlyControlDataStruct.AppPostionCtrl.PostionCtrlY.err = (g_FlyControlDataStruct.AppPostionCtrl.HomeY - g_FlyControlDataStruct.AppOptflowStruct.y_offest); //ROLL
       
        //对位置变化进制限制    
        g_FlyControlDataStruct.AppPostionCtrl.PostionCtrlX.err =LIMIT(g_FlyControlDataStruct.AppPostionCtrl.PostionCtrlX.err,-20,20);//位置偏差限幅，单位cm
        g_FlyControlDataStruct.AppPostionCtrl.PostionCtrlY.err =LIMIT(g_FlyControlDataStruct.AppPostionCtrl.PostionCtrlY.err,-20,20);//位置偏差限幅，单位cm
       
        //对水平X方向进行控制;      
        g_FlyControlDataStruct.AppPostionCtrl.PostionCtrlX.Dis_Err=g_FlyControlDataStruct.AppPostionCtrl.PostionCtrlX.err-g_FlyControlDataStruct.AppPostionCtrl.PostionCtrlX.errold;//原始微分
        g_FlyControlDataStruct.AppPostionCtrl.PostionCtrlX.Err_LPF=Control_Device_LPF(g_FlyControlDataStruct.AppPostionCtrl.PostionCtrlX.err,
                &g_FlyControlDataStruct.AppPostionCtrl.PostionCtrlX.Control_Device_LPF_Buffer,
                &Control_Device_Err_LPF_Parameter);//巴特沃斯低通后得到的微分项,20hz
        
        g_FlyControlDataStruct.AppPostionCtrl.PostionCtrlX.Dis_Err_LPF=g_FlyControlDataStruct.AppPostionCtrl.PostionCtrlX.Err_LPF-g_FlyControlDataStruct.AppPostionCtrl.PostionCtrlX.Last_Err_LPF;//偏差经过低通后的微分量
        g_FlyControlDataStruct.AppPostionCtrl.PostionCtrlX.Last_Err_LPF=g_FlyControlDataStruct.AppPostionCtrl.PostionCtrlX.Err_LPF;
        g_FlyControlDataStruct.AppPostionCtrl.PostionCtrlX.errold= g_FlyControlDataStruct.AppPostionCtrl.PostionCtrlX.err;//保存上次偏差
        g_FlyControlDataStruct.AppPostionCtrl.PostionCtrlX.i += g_FlyControlDataStruct.AppPostionCtrl.PostionCtrlX.i*g_FlyControlDataStruct.AppPostionCtrl.PostionCtrlX.Err_LPF;
        g_FlyControlDataStruct.AppPostionCtrl.PostionCtrlX.i =LIMIT(g_FlyControlDataStruct.AppPostionCtrl.PostionCtrlX.i,-10,10);
        
        /*******总输出计算*********************/
        g_FlyControlDataStruct.AppPostionCtrl.PostionCtrlX.pidout = g_FlyControlDataStruct.AppPostionCtrl.PostionCtrlX.p * g_FlyControlDataStruct.AppPostionCtrl.PostionCtrlX.Err_LPF//比例
                +g_FlyControlDataStruct.AppPostionCtrl.PostionCtrlX.i//积分
                +g_FlyControlDataStruct.AppPostionCtrl.PostionCtrlX.d *g_FlyControlDataStruct.AppPostionCtrl.PostionCtrlX.Dis_Err_LPF;//已对偏差低通，此处不再对微分项单独低通
       
       //对水平Y方向进行控制
        g_FlyControlDataStruct.AppPostionCtrl.PostionCtrlX.Dis_Err=g_FlyControlDataStruct.AppPostionCtrl.PostionCtrlX.err-g_FlyControlDataStruct.AppPostionCtrl.PostionCtrlX.errold;//原始微分
        g_FlyControlDataStruct.AppPostionCtrl.PostionCtrlX.Err_LPF=Control_Device_LPF(g_FlyControlDataStruct.AppPostionCtrl.PostionCtrlX.err,
                &g_FlyControlDataStruct.AppPostionCtrl.PostionCtrlX.Control_Device_LPF_Buffer,
                &Control_Device_Err_LPF_Parameter);//巴特沃斯低通后得到的微分项,20hz
       
        g_FlyControlDataStruct.AppPostionCtrl.PostionCtrlX.Dis_Err_LPF=g_FlyControlDataStruct.AppPostionCtrl.PostionCtrlX.Err_LPF-g_FlyControlDataStruct.AppPostionCtrl.PostionCtrlX.Last_Err_LPF;//偏差经过低通后的微分量
        g_FlyControlDataStruct.AppPostionCtrl.PostionCtrlX.Last_Err_LPF=g_FlyControlDataStruct.AppPostionCtrl.PostionCtrlX.Err_LPF;
        g_FlyControlDataStruct.AppPostionCtrl.PostionCtrlX.errold= g_FlyControlDataStruct.AppPostionCtrl.PostionCtrlX.err;//保存上次偏差
        g_FlyControlDataStruct.AppPostionCtrl.PostionCtrlX.i += g_FlyControlDataStruct.AppPostionCtrl.PostionCtrlX.i*g_FlyControlDataStruct.AppPostionCtrl.PostionCtrlX.Err_LPF;
        g_FlyControlDataStruct.AppPostionCtrl.PostionCtrlX.i =LIMIT(g_FlyControlDataStruct.AppPostionCtrl.PostionCtrlX.i,-10,10);
       
       /*******总输出计算*********************/
        g_FlyControlDataStruct.AppPostionCtrl.PostionCtrlX.pidout = g_FlyControlDataStruct.AppPostionCtrl.PostionCtrlX.p * g_FlyControlDataStruct.AppPostionCtrl.PostionCtrlX.Err_LPF//比例
                +g_FlyControlDataStruct.AppPostionCtrl.PostionCtrlX.i//积分
                +g_FlyControlDataStruct.AppPostionCtrl.PostionCtrlX.d *g_FlyControlDataStruct.AppPostionCtrl.PostionCtrlX.Dis_Err_LPF;//已对偏差低通，此处不再对微分项单独低通
        g_FlyControlDataStruct.AppPostionCtrl.PostionCtrlX.pidout  =LIMIT(g_FlyControlDataStruct.AppPostionCtrl.PostionCtrlX.pidout*out_en,-15,15);
        g_FlyControlDataStruct.AppPostionCtrl.PostionCtrlX.pidout  =LIMIT(g_FlyControlDataStruct.AppPostionCtrl.PostionCtrlX.pidout*out_en,-15,15);
       
    }
}

void PositionControl(void)
{
    if(g_FlyControlDataStruct.AppConfigDataStruct.Fixed_Point_Mode == 0)
    {
        return;
    }

    switch(g_FlyControlDataStruct.AppConfigDataStruct.Startflg)
    {
    case 0://没有起飞
        g_FlyControlDataStruct.AppConfigDataStruct.Flowflag = 0;//不定点
        break;

    case 2://自动起飞阶段完成
        g_FlyControlDataStruct.AppConfigDataStruct.Flowflag = 1;		//开启定点
        break;
    }

    PositionXY();//位置速度环控制
}


/******************************************************************油门定高控制与输出*******************************************************************************/

float ThrControl(void)
{
    float AngleCompensation;
    
    g_FlyControlDataStruct.AppCtrlStruct.ThrControl=(g_FlyControlDataStruct.AppRcDataStruct.THR - ThrottleMin); //油门扩容   到飞控 1000 - 2000
   ;
    //求偏离Z轴的角度,进行油门补偿
    AngleCompensation = Q_rsqrt(g_FlyControlDataStruct.App_AngleStruct.Pitch*g_FlyControlDataStruct.App_AngleStruct.Pitch+ g_FlyControlDataStruct.App_AngleStruct.Roll*g_FlyControlDataStruct.App_AngleStruct.Roll);

    if(AngleCompensation>30)	
    {    
        AngleCompensation=30;	//限幅
    }
    
    AngleCompensation /= 57.3;	 	//角度转弧度

    if(g_FlyControlDataStruct.AppConfigDataStruct.FlyMode==1)
    {
        AltitudeCtrl();//调用高度控制器
        g_FlyControlDataStruct.AppCtrlStruct.ThrControl=(g_FlyControlDataStruct.AppCtrlStruct.ThrControl/my_cos(AngleCompensation));
        g_FlyControlDataStruct.AppCtrlStruct.ThrControl = LIMIT(g_FlyControlDataStruct.AppCtrlStruct.ThrControl,0,1000-balance_max);
        return g_FlyControlDataStruct.AppCtrlStruct.ThrControl;
    }
    //速度阻尼
    g_FlyControlDataStruct.AppCtrlStruct.ThrControl-=NewSinsData.Speed[0]*3;
    g_FlyControlDataStruct.AppCtrlStruct.ThrControl= g_FlyControlDataStruct.AppCtrlStruct.ThrControl/my_cos(AngleCompensation);
}


void DrvMotoPwm(void)
{
    if(Airfoil ==MULTITYPE_QUADP)
    {
//        TIM4->CCR1=0 + g_FlyControlDataStruct.AppCtrlStruct.Moto[0];
//        TIM4->CCR2=0 + g_FlyControlDataStruct.AppCtrlStruct.Moto[1];
//        TIM4->CCR4=0 + g_FlyControlDataStruct.AppCtrlStruct.Moto[2];
//        TIM4->CCR3=0 + g_FlyControlDataStruct.AppCtrlStruct.Moto[3];
    }
}
void DrvMotoStop(void)
{
    if(Airfoil ==MULTITYPE_QUADP)
    {
        TIM4->CCR1=0;
        TIM4->CCR2=0;
        TIM4->CCR3=0;
        TIM4->CCR4=0;
    }
}


/******************************************************************混合动力分配控制*******************************************************************************/
void Mixedcontrol(void)
{
    s16 Pitch,Roll,Yaw;
    Pitch = (s16)g_FlyControlDataStruct.AppCtrlStruct.Pitch.GyroPid.pidout;
    Roll  = (s16)g_FlyControlDataStruct.AppCtrlStruct.Roll.GyroPid.pidout;
    Yaw   = (s16)g_FlyControlDataStruct.AppCtrlStruct.Yaw.GyroPid.pidout;

    if((g_FlyControlDataStruct.AppConfigDataStruct.Thrlow!=1))
    {
        //进入混控判断飞行机型
        switch(Airfoil)
        {
        case MULTITYPE_BI:
            break;

        case MULTITYPE_QUADP:
            /*         CW2     1CCW           */
            /*             \ /                */
            /*             / \                */
            /*        CCW3     4CW            */
            balance[0] =  + Pitch - Roll + Yaw;//1// 右前
            balance[1] =  + Pitch + Roll - Yaw;//2// 左前
            balance[2] =  - Pitch + Roll + Yaw;//3// 左后
            balance[3] =  - Pitch - Roll - Yaw;//4// 右后
            balance_max = 0;

            for(u8 i=0; i<4; i++)
            {
                if(balance_max < ABS(balance[i])) balance_max = balance[i];
            }

            balance_max = LIMIT(balance_max,0,200);
            g_FlyControlDataStruct.AppCtrlStruct.Moto[0] =  (s16)g_FlyControlDataStruct.AppCtrlStruct.ThrControl + balance[0];
            g_FlyControlDataStruct.AppCtrlStruct.Moto[1] =  (s16)g_FlyControlDataStruct.AppCtrlStruct.ThrControl + balance[1];
            g_FlyControlDataStruct.AppCtrlStruct.Moto[2] =  (s16)g_FlyControlDataStruct.AppCtrlStruct.ThrControl + balance[2];
            g_FlyControlDataStruct.AppCtrlStruct.Moto[3] =  (s16)g_FlyControlDataStruct.AppCtrlStruct.ThrControl + balance[3];
            break;

        case MULTITYPE_HEX6X:
            /*         CW2     1CCW           */
            /*            \   /               */
            /*             \ /                */
            /*   CCW3―― ――     ―― ――6CW*/
            /*             / \                */
            /*            /   \               */
            /*         CW4     5CCW           */
            g_FlyControlDataStruct.AppCtrlStruct.Moto[0] = + Pitch - Roll/2 + Yaw;// 1点钟方向，CCW
            g_FlyControlDataStruct.AppCtrlStruct.Moto[1] = + Pitch + Roll/2 - Yaw;//11点钟方向， CW
            g_FlyControlDataStruct.AppCtrlStruct.Moto[2] =         + Roll   + Yaw;// 9点钟方向，CCW
            g_FlyControlDataStruct.AppCtrlStruct.Moto[3] = - Pitch + Roll/2 - Yaw;// 7点钟方向， CW
            g_FlyControlDataStruct.AppCtrlStruct.Moto[4] = - Pitch - Roll/2 + Yaw;// 5点钟方向，CCW
            g_FlyControlDataStruct.AppCtrlStruct.Moto[5] =         - Roll   - Yaw;// 3点钟方向， CW

            for(u8 i=0; i<6; i++)
            {
                g_FlyControlDataStruct.AppCtrlStruct.Moto[i] = (s16)g_FlyControlDataStruct.AppCtrlStruct.ThrControl  + g_FlyControlDataStruct.AppCtrlStruct.Moto[i] ;
                g_FlyControlDataStruct.AppCtrlStruct.Moto[i] = LIMIT(g_FlyControlDataStruct.AppCtrlStruct.Moto[i],200,1000);
            }

            break;
        };
    }
    //解锁后的怠速转动 防止电机停止之后再响应出现的震动和延迟
    else
    {
        g_FlyControlDataStruct.AppCtrlStruct.Moto[0] = 0;
        g_FlyControlDataStruct.AppCtrlStruct.Moto[1] = 0;
        g_FlyControlDataStruct.AppCtrlStruct.Moto[2] = 0;
        g_FlyControlDataStruct.AppCtrlStruct.Moto[3] = 0;
    }

    //如果已经解锁 电机容许输出
    if(g_FlyControlDataStruct.AppConfigDataStruct.AirStatus == 1)
    {
        DrvMotoPwm();
    }
    //没有解锁  电机不可输出
    else if(g_FlyControlDataStruct.AppConfigDataStruct.AirStatus == 0)
    {
        g_FlyControlDataStruct.AppCtrlStruct.Pitch.AnglePid.Increment=0;
        g_FlyControlDataStruct.AppCtrlStruct.Pitch.AnglePid.Increment=0;
        g_FlyControlDataStruct.AppCtrlStruct.Pitch.AnglePid.Increment=0;
        g_FlyControlDataStruct.AppCtrlStruct.Pitch.GyroPid.Increment=0;
        g_FlyControlDataStruct.AppCtrlStruct.Pitch.GyroPid.Increment=0;
        g_FlyControlDataStruct.AppCtrlStruct.Pitch.GyroPid.Increment=0;
        DrvMotoStop();
    }
}

/******************************************************************特殊功能设置*******************************************************************************/
//抛飞检测
void Throw_Fly_Check(void)
{
    static u8 _cnt;

    //解锁状态下不检测
    if(g_FlyControlDataStruct.AppConfigDataStruct.AirStatus==1 || g_FlyControlDataStruct.AppConfigDataStruct.Throw == 0) return;

    //检测上升
    if(_cnt==0 && NewSinsData.Speed[0] > 200)
    {
        _cnt=1;
    }

    //上升到顶点马上启动电机保持平衡
    if(_cnt==1 && NewSinsData.Speed[0] < 50)
    {
        g_FlyControlDataStruct.AppConfigDataStruct.AirStatus = 1;
        _cnt = 0;
    }
}

