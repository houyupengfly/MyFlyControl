/*============================================================================
** 作者：侯玉鹏
** 日期：2017/10/31
** 版本：V1.0
** 函数名:
** 函数功能：
** 输入参数：
** 输出 ：1  返回值：
          2  改变的全局变量
** 本函数调用的其它函数（版本号）：
** 备注：
** 修改日志： （作者，日期，修改内容及原因）
==============================================================================*/
/*============================ INCLUDES ======================================*/

#include "stm32f10x.h"

#include "driver_mpu6050.h"
#include "driver_mpc2520.h"
#include "device_IST8310.h"
#include "driver_Voltage.h"

#include "FlyControlDataStruct.h"
#include "scheduler.h"
#include "systream_time.h"

#include "Revice.h"
#include "data_transfer.h"

#include "control.h"

#include "Parameter.h"
#include "Algorithm_ahrs.h"
#include "SeedEstimated.h"
#include "stdio.h"

/*============================ MACROS ========================================*/

#if 1
#pragma import(__use_no_semihosting)             
//标准库需要的支持函数                 
struct __FILE 
{ 
	int handle; 
}; 

FILE __stdout;       
//定义_sys_exit()以避免使用半主机模式    
void _sys_exit(int x) 
{ 
x = x; 
} 
//重定义fputc函数 
int fputc(int ch, FILE *f)
{ 	
	while((UART5->SR&0X40)==0);//循环发送,直到发送完毕   
	UART5->DR = (u8) ch;      
	return ch;
}
#endif

/*============================ TYPES =========================================*/


/*============================ GLOBAL VARIABLES ==============================*/
/* 定义飞控总数据结构 */
FlyControlDataStruct g_FlyControlDataStruct;


/*============================ STATIC VARIABLES ==============================*/
u16 i,ms;
/*============================ FUNCTION ======================================*/

/*----------------------------------------------------------
 + 实现功能：1ms周期任务
----------------------------------------------------------*/
void Fc_Task_1ms()
{
//    Call_Data_transfer();
}

/*----------------------------------------------------------
 + 实现功能：2ms周期任务
----------------------------------------------------------*/
void Fc_Task_2ms()
{
    /* 调用0号计时通道，用于计算两侧调用的时间间隔 */
    float inner_loop_time = Fc_Call_timer_cycle(0);

    /* 遥控器通道数据处理 */
    Call_RadioContrl();

    Call_RadioContrlTarget((float)(g_FlyControlDataStruct.AppRcDataStruct.Roll-1500),(float)(g_FlyControlDataStruct.AppRcDataStruct.Pitch-1500),(float)(g_FlyControlDataStruct.AppRcDataStruct.Yaw-1500));
}

/*----------------------------------------------------------
 + 实现功能：5ms周期任务
----------------------------------------------------------*/
void Fc_Task_5ms()
{
    /* mpu6轴传感器数据处理 */
    Call_MPU6050_Data_Prepare();
   
    /* 调用1号计时通道，用于计算两侧调用的时间间隔 */
    float outer_loop_time = Fc_Call_timer_cycle(1);
    /* IMU更新姿态:ROL,PIT,YAW姿态角 */
    AHRS_Geteuler(outer_loop_time);
    AltiEstimate(&g_FlyControlDataStruct,outer_loop_time);
    SPL06_001_StateMachine();
    AngalControl(&g_FlyControlDataStruct);
    GyroPIDControl(&g_FlyControlDataStruct);
    ThrControl();
    Mixedcontrol();

}
/*----------------------------------------------------------
 + 实现功能：10ms周期任务
----------------------------------------------------------*/
void Fc_Task_10ms()
{
     Call_UnLock();
}

/*----------------------------------------------------------
 + 实现功能：20ms周期任务
----------------------------------------------------------*/
void Fc_Task_20ms()
{
    Flag_Check();
}

/*----------------------------------------------------------
 + 实现功能：50ms周期任务
----------------------------------------------------------*/
void Fc_Task_50ms()
{
    Static_Check();
    voltage_check();
}

/*----------------------------------------------------------
 + 实现功能：100ms周期任务
----------------------------------------------------------*/
void Fc_Task_100ms()
{
    CallRCState();
    ParamLoop();
}

/*----------------------------------------------------------
 + 实现功能：主循环 由主函数调用
----------------------------------------------------------*/
void Fc_Task_Loop()
{
    //循环周期为1ms
    if(g_FlyControlDataStruct.AppConfigDataStruct.check_flag >= 1)
    {
        Fc_Task_1ms();     //周期1ms的任务

        /* 判断每个不同周期的执行任务执行条件 */
        if(g_FlyControlDataStruct.AppConfigDataStruct.loop_500HZ >= 2)
        {
            g_FlyControlDataStruct.AppConfigDataStruct.loop_500HZ = 0;
            Fc_Task_2ms();     //周期2ms的任务
        }

        if(g_FlyControlDataStruct.AppConfigDataStruct.loop_200HZ >= 5)
        {
            g_FlyControlDataStruct.AppConfigDataStruct.loop_200HZ = 0;
            Fc_Task_5ms();     //周期5ms的任务
        }

        if(g_FlyControlDataStruct.AppConfigDataStruct.loop_100HZ >= 10)
        {
            g_FlyControlDataStruct.AppConfigDataStruct.loop_100HZ = 0;
            Fc_Task_10ms();    //周期10ms的任务
        }

        if(g_FlyControlDataStruct.AppConfigDataStruct.loop_50HZ >= 20)
        {
            g_FlyControlDataStruct.AppConfigDataStruct.loop_50HZ= 0;
            Fc_Task_20ms();    //周期20ms的任务
        }

        if(g_FlyControlDataStruct.AppConfigDataStruct.loop_20HZ >= 50)
        {
            g_FlyControlDataStruct.AppConfigDataStruct.loop_20HZ = 0;
            Fc_Task_50ms();    //周期50ms的任务
        }

        if(g_FlyControlDataStruct.AppConfigDataStruct.loop_10HZ>= 100)
        {
            g_FlyControlDataStruct.AppConfigDataStruct.loop_10HZ= 0;
            i++;

            if(i == 10)
            {
                ms++;
                i=0;
            }

            Fc_Task_100ms();    //周期50ms的任务
        }

        /* 循环运行完毕 标志清零 */
        g_FlyControlDataStruct.AppConfigDataStruct.check_flag = 0;
    }
}

/*----------------------------------------------------------
 + 实现功能：由Systick定时器调用 周期：1毫秒
----------------------------------------------------------*/
void Fc_Call_Loop_timer()
{
    /* 不同周期的执行任务独立计时 */
    g_FlyControlDataStruct.AppConfigDataStruct.loop_1000HZ++;
    g_FlyControlDataStruct.AppConfigDataStruct.loop_500HZ++;
    g_FlyControlDataStruct.AppConfigDataStruct.loop_200HZ++;
    g_FlyControlDataStruct.AppConfigDataStruct.loop_100HZ++;
    g_FlyControlDataStruct.AppConfigDataStruct.loop_50HZ++;
    g_FlyControlDataStruct.AppConfigDataStruct.loop_20HZ++;
    g_FlyControlDataStruct.AppConfigDataStruct.loop_10HZ++;

    /* 如果代码在预定周期内没有运行完 */
    if(g_FlyControlDataStruct.AppConfigDataStruct.check_flag >= 2)
        /* 错误次数计数 */
        g_FlyControlDataStruct.AppConfigDataStruct.err_flag ++;
    /* 循环运行开始 标志置1 */
    else
        g_FlyControlDataStruct.AppConfigDataStruct.check_flag += 1;

    /* 等待数传数据开始发送 */
    static short time_1ms;

    /* 上电延时 标志置1 */
    if(time_1ms == 4096)
    {
        /* 上电延时自动校准气压计 */
//        start_height=0;
//        /* 上电延时后发送数据 */
        wait_for_translate = 1;
        time_1ms++;
    }
    else if(time_1ms < 4096)
        time_1ms++;
}


