/*=============================================================================
** 作者：侯玉鹏
** 日期：2017/10/31
** 版本：V1.0
** 函数名: 
** 函数功能：
** 输入参数：
** 输出 ：1  返回值：
          2  改变的全局变量
** 本函数调用的其它函数（版本号）：
** 备注：
** 修改日志： （作者，日期，修改内容及原因）
==============================================================================*/

/*============================ INCLUDES ======================================*/
#include "stm32f10x.h"
#include "driver_mpu6050.h"
#include "device_mpu6050.h"
#include "device_iic.h"
#include "parameter.h"
#include "systream_time.h"
#include "FlyControlDataStruct.h"
#include "Algorithm_filter.h"
/*============================ MACROS ========================================*/
/* 校准时的计算次数 */
#define  OFFSET_AV_NUM 	        50
/* 滑动窗口滤波数值个数 */
#define  FILTER_NUM 			10
/* Gyro角速度的单位转换 */
#define  TO_ANGLE 			    0.06103f
#define  TO_ACC                 0.000061f
#define  IIR_ORDER              4      //使用IIR滤波器的阶数
#define  Nacc                   0.0023;   //9.8/4096
/*============================ TYPES =========================================*/

/*============================ GLOBAL VARIABLES ==============================*/
extern FlyControlDataStruct g_FlyControlDataStruct;
extern ParamStatus_EnumType g_ParamStatusStruct;
/*============================ STATIC VARIABLES ==============================*/
/* MPU6050结构体 */
/* 传感器校准数据累加和 */
s32 sum_temp[7]= {0,0,0,0,0,0,0};
/* 传感器校准临时计数 */
u16 acc_sum_cnt = 0,gyro_sum_cnt = 0;
double b_IIR[IIR_ORDER+1] ={0.0008f, 0.0032f, 0.0048f, 0.0032f, 0.0008f};  //系数b
double a_IIR[IIR_ORDER+1] ={1.0000f, -3.0176f, 3.5072f, -1.8476f, 0.3708f};//系数a
double InPut_IIR[3][IIR_ORDER+1] = {0};
double OutPut_IIR[3][IIR_ORDER+1] = {0};
/*============================ FUNCTION ======================================*/
/*----------------------------------------------------------
 + 实现功能：MPU6050加速度计、陀螺仪数据校准
----------------------------------------------------------*/
void MPU6050_Data_Offset()
{
     /* 加速度计校准 */
    if(g_FlyControlDataStruct.AppConfigDataStruct.calibratingA== 1)
    {
        /* 计数及累加 */
        acc_sum_cnt++;
        sum_temp[A_X] += g_FlyControlDataStruct.AppImuDataStruct.iAccX;
        sum_temp[A_Y] += g_FlyControlDataStruct.AppImuDataStruct.iAccY;
        sum_temp[A_Z] += g_FlyControlDataStruct.AppImuDataStruct.iAccZ - 4096;
  

        /* 判断计数符合条件 */
        if( acc_sum_cnt >= OFFSET_AV_NUM )
        {
            /* 计算校验数据 */
            g_FlyControlDataStruct.AppImuDataStruct.AccXoffest = sum_temp[A_X]/OFFSET_AV_NUM;
            g_FlyControlDataStruct.AppImuDataStruct.AccYoffest = sum_temp[A_Y]/OFFSET_AV_NUM;
            g_FlyControlDataStruct.AppImuDataStruct.AccZoffest = sum_temp[A_Z]/OFFSET_AV_NUM;
            /* 清零过程变量 */
            acc_sum_cnt =0;
            sum_temp[A_X] = sum_temp[A_Y] = sum_temp[A_Z] = sum_temp[TEM] = 0;
		    g_FlyControlDataStruct.AppConfigDataStruct.calibratingA = 0;
            /* 保存校验数据 */
		    g_ParamStatusStruct = WriteAllParam;
        }
    }

    /* 陀螺仪校准 */
    if(g_FlyControlDataStruct.AppConfigDataStruct.calibratingG == 1)
    {
        /* 计数及累加 */
        gyro_sum_cnt++;
        sum_temp[G_X] += g_FlyControlDataStruct.AppImuDataStruct.iGyroX;
        sum_temp[G_Y] += g_FlyControlDataStruct.AppImuDataStruct.iGyroY;
        sum_temp[G_Z] += g_FlyControlDataStruct.AppImuDataStruct.iGyroZ;

        /* 判断计数符合条件 */
        if( gyro_sum_cnt >= OFFSET_AV_NUM )
        {
            /* 计算校验数据 */
            g_FlyControlDataStruct.AppImuDataStruct.GyroXoffest  = (float)sum_temp[G_X]/OFFSET_AV_NUM;
            g_FlyControlDataStruct.AppImuDataStruct.GyroYoffest = (float)sum_temp[G_Y]/OFFSET_AV_NUM;
            g_FlyControlDataStruct.AppImuDataStruct.GyroZoffest = (float)sum_temp[G_Z]/OFFSET_AV_NUM;
            /* 清零过程变量 */
            gyro_sum_cnt =0;
            sum_temp[G_X] = sum_temp[G_Y] = sum_temp[G_Z] = sum_temp[TEM] = 0;
            /* 保存校验数据 */
			g_FlyControlDataStruct.AppConfigDataStruct.calibratingG = 0;
            g_ParamStatusStruct = WriteAllParam;
        }
    }
}


/*----------------------------------------------------------
 + 实现功能：MPU6050加速度计、陀螺仪数据校准

传感器默认方向
     +x
     |
   --|-- +y
     |

0:默认  
1：传感器顺时针90 度
2：传感器顺时针180度
3：传感器顺时针270度
----------------------------------------------------------*/
void sensor_dir(u8 dir,float itx,float ity,float itz,float *it_x,float *it_y,float *it_z)
{
	switch(dir)
	{
		case 1: //传感器顺时针90度
				*it_x = ity;
				*it_y = -itx;
				*it_z = itz;
		break;
		case 2://传感器顺时针180度
				*it_x = -itx;
				*it_y = -ity;
				*it_z = itz;
		break;
		case 3://传感器顺时针270度
				*it_x = -ity;
				*it_y = itx;
				*it_z = itz;
		break;
		default://传感器默认方向
			*it_x = itx;
			*it_y = ity;
			*it_z = itz;			
		break;
	}
	
}
/*----------------------------------------------------------
 + 实现功能：由任务调度调用周期2ms
----------------------------------------------------------*/
void Call_MPU6050_Data_Prepare(float T)
{
    /* 滤波滑动窗口临时 */
    s32 FILT_TMP[ITEMS] = {0,0,0,0,0,0,0};
    /* 原始数据读取临时数组 */
    u8 mpu6050_buffer[14];
    /* 陀螺仪原始数据临时变量 */
    float Gyro_tmp[3];
    float Acc_tmp[3];
    static float x,y,z;
	
    /*读取原始数据，用mpu6050_buffer[]解析*/
    Call_MPU6050(mpu6050_buffer);
    g_FlyControlDataStruct.AppImuDataStruct.iAccX= ((((s16)mpu6050_buffer[0]) << 8) | mpu6050_buffer[1]);
    g_FlyControlDataStruct.AppImuDataStruct.iAccY= -((((s16)mpu6050_buffer[2]) << 8) | mpu6050_buffer[3]) ;
    g_FlyControlDataStruct.AppImuDataStruct.iAccZ= ((((s16)mpu6050_buffer[4]) << 8) | mpu6050_buffer[5]) ;
    g_FlyControlDataStruct.AppImuDataStruct.iGyroX= -((((s16)mpu6050_buffer[ 8]) << 8) | mpu6050_buffer[9]) ;
    g_FlyControlDataStruct.AppImuDataStruct.iGyroY= ((((s16)mpu6050_buffer[10]) << 8) | mpu6050_buffer[11]) ;
    g_FlyControlDataStruct.AppImuDataStruct.iGyroZ= -((((s16)mpu6050_buffer[12]) << 8) | mpu6050_buffer[13]) ;
		
	MPU6050_Data_Offset();

    /* 陀螺仪原始数据临时变量 */
    Gyro_tmp[0] = g_FlyControlDataStruct.AppImuDataStruct.iGyroX ;
    Gyro_tmp[1] = g_FlyControlDataStruct.AppImuDataStruct.iGyroY ;
    Gyro_tmp[2] = g_FlyControlDataStruct.AppImuDataStruct.iGyroZ ;
  
    Acc_tmp[0] =  g_FlyControlDataStruct.AppImuDataStruct.iAccX;
    Acc_tmp[1] =  g_FlyControlDataStruct.AppImuDataStruct.iAccY;
    Acc_tmp[2] =  g_FlyControlDataStruct.AppImuDataStruct.iAccZ;

    /* 得出校准后的临时数据 */
    g_FlyControlDataStruct.AppImuDataStruct.iAccX =  Acc_tmp[0] - g_FlyControlDataStruct.AppImuDataStruct.AccXoffest;
    g_FlyControlDataStruct.AppImuDataStruct.iAccY =  Acc_tmp[1] - g_FlyControlDataStruct.AppImuDataStruct.AccYoffest;
    g_FlyControlDataStruct.AppImuDataStruct.iAccZ =  Acc_tmp[2] - g_FlyControlDataStruct.AppImuDataStruct.AccZoffest;
    
    g_FlyControlDataStruct.AppImuDataStruct.iGyroX = Gyro_tmp[0] - g_FlyControlDataStruct.AppImuDataStruct.GyroXoffest;
    g_FlyControlDataStruct.AppImuDataStruct.iGyroY=  Gyro_tmp[1] - g_FlyControlDataStruct.AppImuDataStruct.GyroYoffest;
    g_FlyControlDataStruct.AppImuDataStruct.iGyroZ = Gyro_tmp[2] - g_FlyControlDataStruct.AppImuDataStruct.GyroZoffest;
	
	// 加速度计IIR滤波
	g_FlyControlDataStruct.AppImuDataStruct.AccXFilterout = IIR_I_Filter(g_FlyControlDataStruct.AppImuDataStruct.iAccX, InPut_IIR[0], OutPut_IIR[0], b_IIR, IIR_ORDER+1, a_IIR, IIR_ORDER+1);
	g_FlyControlDataStruct.AppImuDataStruct.AccYFilterout = IIR_I_Filter(g_FlyControlDataStruct.AppImuDataStruct.iAccY, InPut_IIR[1], OutPut_IIR[1], b_IIR, IIR_ORDER+1, a_IIR, IIR_ORDER+1);
	g_FlyControlDataStruct.AppImuDataStruct.AccZFilterout = IIR_I_Filter(g_FlyControlDataStruct.AppImuDataStruct.iAccZ, InPut_IIR[2], OutPut_IIR[2], b_IIR, IIR_ORDER+1, a_IIR, IIR_ORDER+1);
	
    g_FlyControlDataStruct.AppImuDataStruct.AccXFilterout =   g_FlyControlDataStruct.AppImuDataStruct.AccXFilterout *9.8/4096;
	g_FlyControlDataStruct.AppImuDataStruct.AccYFilterout =   g_FlyControlDataStruct.AppImuDataStruct.AccYFilterout *9.8/4096;
	g_FlyControlDataStruct.AppImuDataStruct.AccZFilterout =   g_FlyControlDataStruct.AppImuDataStruct.AccZFilterout *9.8/4096;
	
	// 陀螺仪一阶低通滤波
 	g_FlyControlDataStruct.AppImuDataStruct.GyroXFilterout = LPF_1st(x, g_FlyControlDataStruct.AppImuDataStruct.iGyroX* TO_ANGLE,0.386f);	x = g_FlyControlDataStruct.AppImuDataStruct.GyroXFilterout;
 	g_FlyControlDataStruct.AppImuDataStruct.GyroYFilterout = LPF_1st(y, g_FlyControlDataStruct.AppImuDataStruct.iGyroY* TO_ANGLE,0.386f);	y = g_FlyControlDataStruct.AppImuDataStruct.GyroYFilterout;
 	g_FlyControlDataStruct.AppImuDataStruct.GyroZFilterout = LPF_1st(z, g_FlyControlDataStruct.AppImuDataStruct.iGyroZ* TO_ANGLE,0.386f);   z = g_FlyControlDataStruct.AppImuDataStruct.GyroZFilterout;

}

